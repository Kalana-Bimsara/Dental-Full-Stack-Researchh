name: Full-stack CI/CD with Docker Compose

on:
  push:
    branches:
      - main
  # (optional manual trigger)
  workflow_dispatch:

jobs:
  build-publish-arm64-to-docker-hub:
    name: Build & Publish (arm64) to Docker Hub
    runs-on: ubuntu-22.04-arm64            # ← ARM64 GitHub-hosted runner
    permissions:
      contents: read
      packages: write

    # Expose START_TS to the next job
    outputs:
      START_TS: ${{ steps.lt_start.outputs.START_TS }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: backend
            context: app/backend
            file: app/backend/Dockerfile.prod.yml
            repo_suffix: dental-backend
          - name: frontend
            context: app/frontend
            file: app/frontend/Dockerfile.nginx.prod.yml
            repo_suffix: dental-frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # DORA start: timestamp of the commit that landed on main (merge commit time)
      - name: Capture DORA start timestamp (merge commit time on main)
        id: lt_start
        run: echo "START_TS=$(git show -s --format=%cI $GITHUB_SHA)" >> "$GITHUB_OUTPUT"

      # No QEMU needed on ARM64 runner
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_KEY }}

      - name: Prepare tags
        run: |
          USER_LC=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=${GITHUB_SHA::12}
          SAFE_REF=$(echo "$GITHUB_REF_NAME" | tr '[:upper:]' '[:lower:]' | tr -c 'a-z0-9_.-' '-')
          echo "USER_LC=$USER_LC" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "SAFE_REF=$SAFE_REF" >> $GITHUB_ENV

      - name: Build & push ${{ matrix.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          platforms: linux/arm64                 # ← single-arch for Graviton EC2
          push: true
          tags: |
            ${{ env.USER_LC }}/${{ matrix.repo_suffix }}:latest
            ${{ env.USER_LC }}/${{ matrix.repo_suffix }}:${{ env.SHORT_SHA }}
            ${{ env.USER_LC }}/${{ matrix.repo_suffix }}:${{ env.SAFE_REF }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # clean the environment
      - name: Cleanup containers/images/volumes
        if: always()
        run: |
          docker ps -aq | xargs -r docker rm -f
          docker rmi -f myorg/backend:ci || true
          docker image prune -af || true
          docker network prune -f || true
          docker volume prune -f || true
          docker system prune -af --volumes || true

  deploy-ec2-Testing-environment:
    name: Deploy New images to Testing environment EC2 via SSH
    needs: build-publish-arm64-to-docker-hub      # ← matches job id above
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          envs: |
            DOCKER_USER,DOCKER_TOKEN,BACKEND_IMAGE,FRONTEND_IMAGE,MONGO_URI,STRIPE_SECRET_KEY
          command_timeout: 30m
          script: |
            # pull latest images
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}/dental-backend:latest"
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}/dental-frontend:latest"

            # stop & remove old
            sudo docker rm -f backend || true
            sudo docker rm -f frontend || true

            # backend
            sudo docker run -d --name backend \
              --restart unless-stopped \
              -e NODE_ENV=production \
              -e BACKEND_PORT=9000 \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
              -p 9000:9000 \
              "${{ secrets.DOCKER_USERNAME }}/dental-backend:latest"

            # frontend
            sudo docker run -d --name frontend \
              --restart unless-stopped \
              -e NODE_ENV=production \
              -p 80:8080 \
              "${{ secrets.DOCKER_USERNAME }}/dental-frontend:latest"

            sleep 3
            sudo docker ps

      # DORA end: stamp end time after deploy completes
      - name: Stamp end time (UTC)
        id: lt_end
        run: echo "END_TS=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"

      # Compute Lead Time and save (UTC + local)
      - name: Compute Lead Time and save (UTC + local)
        run: |
          python - << 'PY'
          from datetime import datetime, timezone
          from zoneinfo import ZoneInfo
          import os, csv

          start_raw = os.environ["START_TS"]
          end_raw   = os.environ["END_TS"]

          def to_dt(ts: str) -> datetime:
            ts = ts.replace("Z", "+00:00")
            return datetime.fromisoformat(ts)

          s = to_dt(start_raw)
          e = to_dt(end_raw)
          lead_minutes = (e - s).total_seconds() / 60.0

          SL = ZoneInfo("Asia/Colombo")
          s_local = s.astimezone(SL); e_local = e.astimezone(SL)
          s_utc = s.astimezone(timezone.utc); e_utc = e.astimezone(timezone.utc)

          print(f"LeadTimeMinutes={lead_minutes:.2f}")
          rows = [["repo","sha","start_ts_utc","end_ts_utc","start_ts_local","end_ts_local","lead_time_min"],
                  [os.environ["GITHUB_REPOSITORY"], os.environ["GITHUB_SHA"],
                   s_utc.isoformat().replace("+00:00","Z"),
                   e_utc.isoformat().replace("+00:00","Z"),
                   s_local.isoformat(), e_local.isoformat(),
                   f"{lead_minutes:.2f}"]]
          with open("lead_time.csv","w", newline="") as f:
            csv.writer(f).writerows(rows)
          PY
        env:
          START_TS: ${{ needs.build-publish-arm64-to-docker-hub.outputs.START_TS }}
          END_TS: ${{ steps.lt_end.outputs.END_TS }}

      - name: Upload Lead Time artifact
        uses: actions/upload-artifact@v4
        with:
          name: lead-time
          path: lead_time.csv
          if-no-files-found: warn
